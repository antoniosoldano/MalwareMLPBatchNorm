from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
import pandas as pd
import torch.nn.functional as F
import torch
import wandb
from classes.MalwareDataset import MalwareDataset
from classes.DeeperMultilayerPerceptron import DeeperMultilayerPerceptron
import os
from config import *
import streamlit as st
import datetime

st.set_page_config(
    page_title="The Deeper Zoo Playground",
    page_icon="ðŸ¦™",
    layout="wide",
    initial_sidebar_state="expanded"
)


def train_model_thezoo(model_to_train, optimizer):

    def compute_accuracy(net, data_loader):

        correct_pred, num_examples = 0, 0
        with torch.no_grad():
            for features, targets in iter(data_loader):

                features = features.to(device).float()
                targets = targets.to(device).long()

                num_examples += targets.size(0)

                logits, probas = net(features)
                _, predicted_labels = torch.max(probas, 1)

                correct_pred += (predicted_labels == targets).sum()
            return correct_pred.float() / num_examples * 100

    model_to_train.train()
    train_accuracies = []

    for epoch in range(num_epochs):
        epoch_loss = 0
        for (features, targets) in iter(train_loader):

            features = features.to(device).float()
            targets = targets.to(device).long()

            # Forward and back propagation
            logits, probas = model_to_train(features)
            cost = F.cross_entropy(logits, targets)

            optimizer.zero_grad()
            cost.backward()

            # Update optimizer
            optimizer.step()

            epoch_loss += cost.item()

        running_accuracy = compute_accuracy(model_to_train, train_loader)
        train_accuracies.append(running_accuracy)
        empty_container.write('Epoch: %03d/%03d | Loss: %.4f | Epoch accuracy: %.2f%%' % (epoch + 1, num_epochs, epoch_loss/ len(train_loader), running_accuracy))
        progress_bar.progress((epoch+1)/num_epochs)

        if logging:
            wandb.log({"Loss": epoch_loss / len(train_loader)})

    if logging:

        # Logging test accuracy
        logging_test_data = [[epoch, train_accuracy] for (epoch, train_accuracy) in enumerate(train_accuracies)]
        logging_test_table = wandb.Table(data=logging_test_data, columns=["epoch", "train_accuracy"])
        wandb.log({"Train accuracy": wandb.plot.line(logging_test_table, "epoch", "train_accuracy",
                                                     title="Train accuracy over epochs")})

        # Logging beta and gamma values

        for param in model_to_train.linear_1_bn.weight:
            beta_values.append(param.data.item())
        for param in model_to_train.linear_2_bn.weight:
            beta_values.append(param.data.item())
        for param in model_to_train.linear_3_bn.weight:
            beta_values.append(param.data.item())
        for param in model_to_train.linear_4_bn.weight:
            beta_values.append(param.data.item())
        for param in model_to_train.linear_5_bn.weight:
            beta_values.append(param.data.item())
        for param in model_to_train.linear_6_bn.weight:
            beta_values.append(param.data.item())
        for param in model_to_train.linear_1_bn.bias:
            gamma_values.append(param.data.item())
        for param in model_to_train.linear_2_bn.bias:
            gamma_values.append(param.data.item())
        for param in model_to_train.linear_3_bn.bias:
            gamma_values.append(param.data.item())
        for param in model_to_train.linear_4_bn.bias:
            gamma_values.append(param.data.item())
        for param in model_to_train.linear_5_bn.bias:
            gamma_values.append(param.data.item())
        for param in model_to_train.linear_6_bn.bias:
            gamma_values.append(param.data.item())

        data_beta = [[s] for s in beta_values]
        table_beta = wandb.Table(data=data_beta, columns=["beta"])
        wandb.log({'beta': wandb.plot.histogram(table_beta, "beta",
                                                        title="Beta Values")})

        gamma_beta = [[s] for s in gamma_values]
        table_gamma = wandb.Table(data=gamma_beta, columns=["gamma"])
        wandb.log({'gamma': wandb.plot.histogram(table_gamma, "gamma",
                                                title="Gamma Values")})

    model_to_train.eval()
    test_accuracy = compute_accuracy(model_to_train, test_loader)
    st.write('Test accuracy: %.2f%%' % (test_accuracy))

    if logging:
        # Logging the validation accuracy
        wandb.log({"Validation Accuracy": test_accuracy})

def get_optimizer(selected_optimizer, model, learning_rate, momentum):
    if selected_optimizer== "SGD":
        optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum)
    elif selected_optimizer== "RMSprop":
        optimizer = torch.optim.RMSprop(model.parameters(), lr=learning_rate, momentum=momentum)
    elif selected_optimizer== "Adagrad":
        optimizer = torch.optim.Adagrad(model.parameters(), lr=learning_rate)
    elif selected_optimizer== "Adam":
        optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
    elif selected_optimizer== "AdamW":
        optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
    elif selected_optimizer== "Adamax":
        optimizer = torch.optim.Adamax(model.parameters(), lr=learning_rate)
    else:
        # Default SGD
        optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

    return optimizer

# Load the dataset
dataset_path = os.path.join(DATASET_FOLDER, DATASET_THEZOO_FILENAME)
dataset_loaded = False

if os.path.exists(dataset_path):
    df = pd.read_csv(dataset_path)
    dataset_loaded = True
else:
    st.error('Dataset Path not found', icon="ðŸš¨")

if dataset_loaded:

    # Set the device
    if torch.cuda.is_available():
        torch.backends.cudnn.deterministic = True

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

    # Here we shuffle the DataFrame because it comes ordered from the csv
    df = df.sample(frac=1)

    # Here we filter out the numeric columns used for the learning process and we extract the labels
    X = df.iloc[:, 2:-2]
    y = df.iloc[:, -2]

    # We use the sklearn function to split the dataset in train and test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=69)

    # Creation of the datasets (casting of the variables for type matching purpose)
    train_dataset = MalwareDataset(torch.FloatTensor(X_train.to_numpy()), torch.FloatTensor(y_train.to_numpy()))
    test_dataset = MalwareDataset(torch.FloatTensor(X_test.to_numpy()), torch.FloatTensor(y_test.to_numpy()))

    # Set hyperparameters
    st.subheader("Hyperparameters training settings")

    col1, col2 = st.columns(2)
    with col1:
        random_seed = st.number_input(label="Set a random seed", min_value=0, max_value=1000, value=60)
        learning_rate = st.number_input(label="Set the Learning Rate", min_value=0.001, max_value=0.9, value=0.001, step=0.001, format="%f")
    with col2:
        num_epochs = st.number_input(label="Set how many epochs you want to train on", min_value=1, max_value=200, value=30)
        batch_size = st.number_input(label="Select the batch size", min_value=0, max_value=len(train_dataset), value=10)

    # Set architecture
    num_features = 54
    num_hidden_1 = 108
    num_hidden_2 = 216
    num_hidden_3 = 432
    num_hidden_4 = 216
    num_hidden_5 = 108
    num_hidden_6 = 54
    num_classes = 8

    # Creation of the data loaders (shuffle set to false because data has been already shuffled)
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=False)
    test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False)

    # Set torch random seed for reproducibility
    torch.manual_seed(random_seed)

    # Optimizer and momentum selection
    with col1:
        selected_optimizer = st.selectbox("Select the optimizer", ('SGD', 'RMSprop', 'Adagrad', 'Adam', 'AdamW', 'Adamax'))
    with col2:
        momentum = st.slider("Momentum (SGD or RMSprop)", min_value=0.01, max_value=3.0, value=0.02, step=0.01)

    # Enable or disable wandb logging
    logging = st.checkbox("Enable Wandb Logging", value=False)
    run_name = st.text_input("Name of the current run", value="MyRun").strip()

    # Store affine parameters values afterwards
    beta_values = []
    gamma_values = []

    container = st.container()
    if st.button('Run training'):
        normal_run_column, only_batchnorm_column = container.columns(2)

        with normal_run_column:

            st.write("**Training over all parameters**")

            # Inizialize the model and send it to the device
            model = DeeperMultilayerPerceptron(num_features=num_features, num_hidden_1=num_hidden_1,
                                         num_hidden_2=num_hidden_2, num_hidden_3=num_hidden_3,
                                            num_hidden_4= num_hidden_4, num_hidden_5=num_hidden_5,
                                               num_hidden_6=num_hidden_6, num_classes=num_classes)
            model = model.to(device)

            progress_bar = st.progress(0)
            empty_container = st.empty()
            if logging:
                wandb.init(project=WANDB_PROJECT_NAME,
                           id=str(run_name) + "-"+datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
                wandb.watch(model, log_freq=len(train_loader) / batch_size)

            # Train the model
            train_model_thezoo(model_to_train=model, optimizer=get_optimizer(selected_optimizer=selected_optimizer,
                                                                    model=model, learning_rate=learning_rate,
                                                                    momentum=momentum))
            wandb.finish()

        with only_batchnorm_column:

            st.write("**Freezing parameters and training over only batchnorm ones**")

            # Inizialize the model and send it to the device
            model_ob = DeeperMultilayerPerceptron(num_features=num_features, num_hidden_1=num_hidden_1,
                                         num_hidden_2=num_hidden_2, num_hidden_3=num_hidden_3,
                                            num_hidden_4= num_hidden_4, num_hidden_5=num_hidden_5,
                                               num_hidden_6=num_hidden_6, num_classes=num_classes)
            model_ob = model_ob.to(device)

            # Freeze parameters and train only over batchnorm parameters
            model_ob.linear_1.weight.requires_grad = False
            model_ob.linear_1.bias.requires_grad = False
            model_ob.linear_2.weight.requires_grad = False
            model_ob.linear_2.bias.requires_grad = False
            model_ob.linear_3.weight.requires_grad = False
            model_ob.linear_3.bias.requires_grad = False
            model_ob.linear_4.weight.requires_grad = False
            model_ob.linear_4.bias.requires_grad = False
            model_ob.linear_5.weight.requires_grad = False
            model_ob.linear_5.bias.requires_grad = False
            model_ob.linear_6.weight.requires_grad = False
            model_ob.linear_6.bias.requires_grad = False
            model_ob.linear_out.weight.requires_grad = False
            model_ob.linear_out.bias.requires_grad = False

            progress_bar = st.progress(0)
            empty_container = st.empty()
            if logging:
                wandb.init(project=WANDB_PROJECT_NAME,
                           id=str(run_name)+"_Only_Batchnorm-"+datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
                wandb.watch(model, log_freq=len(train_loader) / batch_size)

            # Train the model
            train_model_thezoo(model_to_train=model_ob, optimizer=get_optimizer(selected_optimizer=selected_optimizer,
                                                                             model=model_ob, learning_rate=learning_rate,
                                                                             momentum=momentum))
            wandb.finish()






