from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
import pandas as pd
import torch.nn.functional as F
import torch
import wandb
from MultilayerPerceptron import MultilayerPerceptron
from MalwareDataset import MalwareDataset
import os
from config import *
import streamlit as st

# Hyperparameters
random_seed = 60
learning_rate = 0.001
num_epochs = 30
batch_size = 10

# Architecture
num_features = 54
num_hidden_1 = 108
num_hidden_2 = 216
num_classes = 8

# Load the dataset

dataset_path = os.path.join(DATASET_FOLDER, DATASET_THEZOO_FILENAME)
dataset_loaded = False

if os.path.exists(dataset_path):
    df = pd.read_csv(dataset_path)
    dataset_loaded = True
else:
    st.error('Dataset Path not found', icon="ðŸš¨")

if dataset_loaded:

    # Set the device
    if torch.cuda.is_available():
        torch.backends.cudnn.deterministic = True

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

    logging = False

    # Here we shuffle the DataFrame because it comes ordered from the csv
    df = df.sample(frac=1)

    # Here we filter out the numeric columns used for the learning process and we extract the labels
    X = df.iloc[:, 2:-2]
    y = df.iloc[:, -2]

    # We use the sklearn function to split the dataset in train and test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=69)

    # Creation of the datasets (casting of the variables for type matching purpose)
    train_dataset = MalwareDataset(torch.FloatTensor(X_train.to_numpy()), torch.FloatTensor(y_train.to_numpy()))
    test_dataset = MalwareDataset(torch.FloatTensor(X_test.to_numpy()), torch.FloatTensor(y_test.to_numpy()))

    # Creation of the data loaders (shuffle set to false because data has been already shuffled)
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=False)
    test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False)

    # Set torch random seed for reproducibility
    torch.manual_seed(random_seed)

    # Inizialize the model and send it to the device
    model = MultilayerPerceptron(num_features=num_features, num_hidden_1=num_hidden_1, num_hidden_2=num_hidden_2, num_classes=num_classes)
    model = model.to(device)

    model.linear_1.requires_grad_(False)
    model.linear_2.requires_grad_(False)
    model.linear_out.requires_grad_(False)

    if logging:
        wandb.login()
        wandb.init(project="training-bn-only", id="all-layers-frozen")
        wandb.watch(model, log_freq=10)

    optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)
    def compute_accuracy(net, data_loader):

        correct_pred, num_examples = 0, 0
        with torch.no_grad():
            for features, targets in iter(data_loader):

                features = features.to(device).float()
                targets = targets.to(device).long()

                num_examples += targets.size(0)

                logits, probas = net(features)
                _, predicted_labels = torch.max(probas, 1)

                correct_pred += (predicted_labels == targets).sum()
            return correct_pred.float() / num_examples * 100

    model.train()
    for epoch in range(num_epochs):

        epoch_loss = 0
        epoch_acc = 0
        for (features, targets) in iter(train_loader):

            #features = features.to(torch.float32)
            features = features.to(device).float()

            #targets = torch.reshape(targets.to(torch.float32), [len(targets),-1])
            targets = targets.to(device).long()

            ### FORWARD AND BACK PROP
            logits, probas = model(features)
            #loss = torch.nn.CrossEntropyLoss()
            #logits = logits.type(torch.LongTensor).to(device)
            cost = F.cross_entropy(logits, targets)
            #cost = loss(logits, torch.LongTensor(targets))

            optimizer.zero_grad()
            cost.backward()

            ### UPDATE MODEL PARAMETERS
            optimizer.step()

            if logging:
                wandb.log({"loss": cost, "epoch": epoch})

        print('Epoch: %03d/%03d training accuracy: %.2f%%' % (
            epoch + 1, num_epochs,
            compute_accuracy(model, train_loader)))

    model.eval()
    print('Test accuracy: %.2f%%' % (compute_accuracy(model, test_loader)))

