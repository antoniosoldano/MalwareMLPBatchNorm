import time
import numpy as np
import pandas.core.frame as frame
from torchvision import datasets
from torchvision import transforms
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
import pandas as pd
import torch.nn.functional as F
import torch
import wandb
from MultilayerPerceptron import MultilayerPerceptron
from DikeDataset import DikeDataset
import math


dataFrame = pd.read_csv('dataset/dike_dataset.csv')
dataFrame = dataFrame.sample(frac=1)

values = np.array(dataFrame.values.tolist())
#values = values.astype(np.float)

n_rows = len(values)
n_train = math.floor((n_rows * 25) /100)
n_test = n_rows - n_train

X_train = values[0:n_train, 2:-2].astype(float)
y_train = values[0:n_train, -2].astype(bool)
X_test = values[n_train:, 2:-2].astype(float)
y_test = values[n_train:, -2].astype(bool)

train_dataset = DikeDataset(X_train, y_train)
test_dataset = DikeDataset(X_test, y_test)


batch_size = 10

train_loader = DataLoader(dataset=train_dataset,
                          batch_size=batch_size,
                          shuffle=False,
                          collate_fn=None)

test_loader = DataLoader(dataset=test_dataset,
                         batch_size=batch_size,
                         shuffle=False,
                         collate_fn=None)

for batch_idx, (features, targets) in enumerate(train_loader):
    print(features, torch.reshape(targets, [len(targets),-1]))
    break
