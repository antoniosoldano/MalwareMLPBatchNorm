import torch

# def compute_accuracy(net, data_loader):
#     net.eval()
#     correct_pred, num_examples = 0, 0
#     with torch.no_grad():
#         for features, targets in iter(data_loader):
#
#             features = features.to(torch.float32)
#             features = features.to(device)
#             num_examples += targets.size(0)
#             targets = torch.reshape(targets.to(torch.float32), [len(targets), -1])
#             targets = targets.to(device)
#             logits, probas = net(features)
#             # num_examples += targets.size(0)
#             correct_pred += (logits == targets).sum()
#
#             # Accuracy
#             #print("Testing Accuracy: {0:.4f}".format(metrics.accuracy_score(predicted_labels.cpu(), targets.cpu())))
#             print(correct_pred.float())
#
#         return correct_pred.float() / num_examples * 100



